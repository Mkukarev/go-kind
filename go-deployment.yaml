apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-http-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-http
  template:
    metadata:
      labels:
        app: go-http
    spec:
      containers:
      - name: go-http
        image: localhost:5001/go-http:1.0.1
        ports:
        - containerPort: 8080
        env:
        - name: GRPC_SERVER_URL
          value: "go-grpc-service:3002"
        - name: HTTP_SERVER_IDLE_TIMEOUT
          value: "60"
---
kind: Service
apiVersion: v1
metadata:
  name: go-http-service
spec:
  selector:
    app: go-http
  ports:
  # Default port used by the image
  - port: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-grpc-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-grpc
  template:
    metadata:
      labels:
        app: go-grpc
    spec:
      containers:
      - name: go-grpc
        image: localhost:5001/go-grpc:1.0.1
        ports:
        - containerPort: 3002
        env:
        - name: HTTP_SERVER_IDLE_TIMEOUT
          value: "60"
        - name: HTTP_SERVER_READ_TIMEOUT
          value: "1"
        - name: HTTP_SERVER_WRITE_TIMEOUT
          value: "2"
        - name: HTTP_SERVER_PORT
          value: "3002"
        - name: DATABASE_URL
          value: "postgres://postgres:pgpwd4habr@postgres-service:5432/postgres"
        - name: DATABASE_LOG_LEVEL
          value: "warn"
        - name: DATABASE_MAX_OPEN_CONNECTIONS
          value: "10"
---
kind: Service
apiVersion: v1
metadata:
  name: go-grpc-service
spec:
  selector:
    app: go-grpc
  ports:
  - name: grpc
    port: 3002
    targetPort: 3002
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgress
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: localhost:5001/postgres:latest
        ports:
        - containerPort: 5432
        env:
        - name:  POSTGRES_DB
          value: "postgres"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "pgpwd4habr"
---
kind: Service
apiVersion: v1
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
  # Default port used by the image
  - port: 5432
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: go-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
  - http:
      paths:
      - path: /api(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: go-http-service
            port:
              number: 8080
---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: minio-pvc
# spec:
#   accessModes:
#   - ReadWriteOnce
#   resources:
#     requests:
#       storage: 10Gi
#   storageClassName: microk8s-hostpath
# ---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  labels:
    app: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
      - name: minio
        image: bitnami/minio
        ports:
        - containerPort: 9000
        - containerPort: 9001
        imagePullPolicy: Always
        env:
        # - name: MINIO_BROWSER_REDIRECT_URL
        #   value: "https://example.com/minio/"
        - name: MINIO_ROOT_USER
          value: "admin"
        - name: MINIO_ROOT_PASSWORD
          value: "adminadmin"
        - name: MINIO_DEFAULT_BUCKETS
          value: "default"
        # volumeMounts:
        # - name: minio-storage
        #   mountPath: "/data"
      # volumes:
      # - name: minio-storage
      #   persistentVolumeClaim:
      #     claimName: minio-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: minio-service
spec:
  selector:
    app: minio
  ports:
  - name: http
    port: 9000
    targetPort: 9000
  - name: console
    port: 9001
    targetPort: 9001
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
    spec:
      containers:
      - name: loki
        image: docker.io/grafana/loki:2.9.4
        volumeMounts:
          - name: loki-config
            mountPath: /etc/loki/
        args:
        - -config.file=/etc/loki/config.yaml
        ports:
        - containerPort: 3100
      volumes:
      - name: loki-config
        configMap:
          name: loki-config-map
---
apiVersion: v1
kind: Service
metadata:
  name: loki-service
spec:
  selector:
    app: loki
  ports:
    - protocol: TCP
      port: 3100
      targetPort: 3100
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config-map
data:
  config.yaml: |
    auth_enabled: false

    server:
      http_listen_port: 3100

    common:
      ring:
        instance_addr: 127.0.0.1
        kvstore:
          store: memberlist
      replication_factor: 1
      path_prefix: /loki # Update this accordingly, data will be stored here.

    memberlist:
      join_members:
      # You can use a headless k8s service for all distributor, ingester and querier components.
      # - loki-service.default.svc.cluster.local:7946 # :7946 is the default memberlist port.
      - http://localhost:7946

    schema_config:
      configs:
      - from: 2020-05-15
        store: boltdb-shipper
        object_store: s3
        schema: v11
        index:
          prefix: index_
          period: 24h

    storage_config:
      boltdb_shipper:
        active_index_directory: /loki/index
        cache_location: /loki/index_cache
        shared_store: s3
      aws:
        s3: http://admin:adminadmin@minio-service.default.svc.cluster.local:9000/default
        s3forcepathstyle: true

    compactor:
      working_directory: /loki/compactor
      shared_store: s3
      compaction_interval: 5m
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
spec:
  selector:
    app: grafana
  ports:
    - port: 3200
      protocol: TCP
      targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: promtail
  name: promtail
spec:
  selector:
    matchLabels:
      app: promtail
  template:
    metadata:
      labels:
        app: promtail
    spec:
      containers:
        - name: promtail
          image: grafana/promtail:latest
          args: 
          - "-config.file=/etc/promtail/promtail.yaml"
          ports:
            - containerPort: 9080
              protocol: TCP
          volumeMounts:
          - name: logs
            mountPath: /var/log
          - name: promtail-config
            mountPath: /etc/promtail/
      volumes:
      - name: logs
        hostPath:
          path: /var/log
      - name: promtail-config
        configMap:
          name: promtail-config-map
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config-map
data:
  promtail.yaml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0

    positions:
      filename: /tmp/positions.yaml

    clients:
      - url: http://loki-service.default.svc.cluster.local:3100/loki/api/v1/push

    scrape_configs:
    - job_name: system
      static_configs:
      - targets:
          - localhost
        labels:
          app: go-http
          __path__: /var/log/containers/go-http-*.log
---
apiVersion: v1
kind: Service
metadata:
  name: promtail-service
spec:
  selector:
    app: promtail
  ports:
    - port: 3300
      protocol: TCP
      targetPort: 9080